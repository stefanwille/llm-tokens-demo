"use client";

import { Tiktoken } from "js-tiktoken/lite";
import o200k_base from "js-tiktoken/ranks/o200k_base";
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Code } from "@/components/Code";
import {
  Table,
  TableBody,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Label } from "@/components/ui/label";

const encoder = new Tiktoken(o200k_base);

export function HomeComponent() {
  const [inputText, setInputText] = useState("Hello World!");

  const tokens = encoder.encode(inputText);
  const decodedTokens = tokens.flatMap((token) => encoder.decode([token]));
  const decoded = encoder.decode(tokens);
  const matches = decoded === inputText;

  return (
    <div className="">
      <header>
        <h1 className="mb-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">
          LLM Tokens Demo
        </h1>
        <p className="text-lg font-normal text-gray-500 lg:text-xl dark:text-gray-400">
          A demonstration that makes LLM tokens more tangible
        </p>
        <div className="mb-12"></div>
      </header>

      <main>
        <div>
          <Label className="mb-4" htmlFor="inputText">
            Enter some text and see the tokens generated by the LLM:
          </Label>
          <Input
            type="text"
            name="inputText"
            value={inputText}
            placeholder="Text to tokenize"
            onChange={(e) => {
              setInputText(e.target.value);
            }}
          />
        </div>

        <div className="mb-4"></div>

        <div>
          An LLM generates tokens for your text.
          <Code>{JSON.stringify(tokens)}</Code>
          Decoded tokens: <Code>{JSON.stringify(decodedTokens)}</Code>
          <div>Tokens decoded back to a string: {decoded}</div>
        </div>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[100px]">Index</TableHead>
              <TableHead>Token</TableHead>
              <TableHead>Token decoded back to text</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {tokens.map((token, index) => (
              <TableRow key={`${index - token}`}>
                <TableCell>{index}</TableCell>
                <TableCell>{tokens[index]}</TableCell>
                <TableCell>{decodedTokens[index]}</TableCell>
              </TableRow>
            ))}
          </TableBody>
          <TableFooter>
            <TableRow>
              <TableCell colSpan={3}>Total token: {tokens.length}</TableCell>
            </TableRow>
          </TableFooter>
        </Table>
      </main>
    </div>
  );
}

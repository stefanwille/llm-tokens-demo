"use client";

import { Tiktoken } from "js-tiktoken/lite";
import o200k_base from "js-tiktoken/ranks/o200k_base";
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Code } from "@/components/Code";
import {
  Table,
  TableBody,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Label } from "@/components/ui/label";

const encoder = new Tiktoken(o200k_base);

export function HomeComponent() {
  const [inputText, setInputText] = useState("Hello World!");

  const tokenIDs = encoder.encode(inputText);
  const tokenStrings = tokenIDs.flatMap((token) => encoder.decode([token]));

  return (
    <div className="">
      <header>
        <h1 className="mb-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">
          LLM Tokens Demo
        </h1>
        <p className="text-lg font-normal text-gray-500 lg:text-xl dark:text-gray-400">
          A demonstration that makes LLM tokens more tangible
        </p>
        <div className="mb-12"></div>
      </header>

      <div>
        <div>
          <Label className="mb-4" htmlFor="inputText">
            Enter some text and see the tokens generated by the LLM:
          </Label>
          <Input
            className="w-[400px]"
            type="text"
            name="inputText"
            value={inputText}
            placeholder="Text to tokenize"
            onChange={(e) => {
              setInputText(e.target.value);
            }}
          />
        </div>

        <div className="mb-4"></div>

        <div>
          An LLM generates tokens for your text and represents your text as a
          sequence of these tokens.
          <br />
          Tokens are represented as integers, and the integers are called token
          ids.
          <br />
          <br />
          This is your text as a sequence of token ids:
          <Code>{JSON.stringify(tokenIDs)}</Code>
          <br />
          Each token ids represents a specific fragment, work, syllable or
          character in your text.
          <div>
            These are the tokens as strings:
            <Code>{JSON.stringify(tokenStrings)}</Code>
          </div>
          <br />
          To make the connection between the token ids and the token strings
          clearer, this is a table that shows the mapping:
        </div>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[20px]">Index</TableHead>
              <TableHead className="w-[3px]">Token ID</TableHead>
              <TableHead>Token Text</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {tokenIDs.map((token, index) => (
              <TableRow key={`${index - token}`}>
                <TableCell className="text-right">{index}</TableCell>
                <TableCell className="text-right">{tokenIDs[index]}</TableCell>
                <TableCell>{tokenStrings[index]}</TableCell>
              </TableRow>
            ))}
          </TableBody>
          <TableFooter>
            <TableRow>
              <TableCell colSpan={3}>Total token: {tokenIDs.length}</TableCell>
            </TableRow>
          </TableFooter>
        </Table>

        <br />
        <div>
          If we concatenate the decoded tokens, we get the original input back:{" "}
          <Code>{tokenStrings.join("")}</Code>
        </div>
      </div>
    </div>
  );
}
